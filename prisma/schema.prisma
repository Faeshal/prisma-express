// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// model Client {
//   id    Int          @id @default(autoincrement())
//   name  String
//   email String       @unique
//   item  Item[]
//   trip  TripClient[]
// }

// model Item {
//   id       Int    @id @default(autoincrement())
//   name     String
//   client   Client @relation(fields: [clientId], references: [id])
//   clientId Int
//   trip     Trip?  @relation(fields: [tripId], references: [id])
//   tripId   Int?
// }

// model Trip {
//   id     Int          @id @default(autoincrement())
//   driver String?
//   date   DateTime     @default(now())
//   item   Item[]
//   client TripClient[]
// }

// model TripClient {
//   client   Client @relation(fields: [clientId], references: [id])
//   clientId Int
//   trip     Trip   @relation(fields: [tripId], references: [id])
//   tripId   Int

//   @@id([clientId, tripId])
// }



model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  isActive  Boolean  @default(true)
  posts     Post[]   // one to many with Profile
  profile   Profile?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id     Int          @id @default(autoincrement())
  bio    String?
  user   User         @relation(fields: [userId], references: [id])
  userId Int          @unique // belongs to user
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Post {
  id          Int         @id @default(autoincrement())
  title       String
  published   Boolean     @default(false)
  author      User        @relation(fields: [authorId], references: [id])
  authorId    Int         // belongsto User
  categories  CategoriesOnPosts[]  // many to many with category
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  posts     CategoriesOnPosts[]    // many to many with post
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model CategoriesOnPosts {
  post        Post      @relation(fields: [postId], references: [id])
  postId      Int     
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  Int 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id([postId, categoryId])
}